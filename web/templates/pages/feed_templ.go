// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"Newsly/internal/utils"
	"Newsly/web/templates/layouts"
	"Newsly/web/templates/partials"
	"Newsly/web/templates/partials/icons"
)

func paperBody(data []utils.ArxivEntry) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.JSONScript("papers", data).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func FeedPage(data utils.FeedData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"min-h-screen my-10 flex flex-col gap-4 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\"><div class=\"w-full flex flex-wrap gap-4 items-center bg-mantle rounded-xl p-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = partials.Chip("Feed", "bg-rosewater").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = partials.Chip("Trending", "bg-cp_red").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = partials.Chip("Politics", "bg-cp_blue").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.JSONScript("papers", data.Papers).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<h1 class=\"font-bold text-2xl\">Your Feed:</h1><!-- Change layout to column on mobile and row on md+ --><div class=\"flex-grow flex flex-col md:flex-row gap-4 mt-4\"><button id=\"prevBtn\" type=\"button\" class=\"hidden md:flex hover:bg-mantle transition-colors px-2 py-1 rounded-lg my-auto\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = icons.ChevronLeft().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</button><div class=\"bg-mantle rounded-xl px-4 md:px-16 py-12 flex-grow relative\"><div id=\"paper-container\" class=\"bg-mantle rounded-xl px-4 md:px-8 py-8 flex-grow relative\"></div><div class=\"bg-crust bg-opacity-70 h-fit flex flex-col gap-4 absolute right-0 bottom-0 md:top-0 items-center justify-center p-4 rounded-xl\"><button class=\"flex flex-col justify-center items-center\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = icons.Heart().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<span>1.5k</span></button> <button class=\"flex flex-col justify-center items-center\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = icons.Comment().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<span>1.5k</span></button> <button class=\"flex flex-col justify-center items-center\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = icons.Bookmark().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<span>1.5k</span></button></div></div><button id=\"nextBtn\" type=\"button\" class=\"hidden md:flex hover:bg-mantle transition-colors px-2 py-1 rounded-lg my-auto\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = icons.ChevronRight().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</button></div></div><script>\n\t\t\t// Convert the papers passed from the server to a JS variable.\n\t\t\t// (Assumes your templating engine provides a helper like @json to output valid JSON.)\n\t\t\tconst papers =JSON.parse(document.getElementById('papers').textContent);\n\t\t\tconsole.log(papers[0])\n\t\t\tlet currentIndex = 0;\n\n\t\t\t// Function to render an paper in the container\n\t\t\tfunction renderPaper(index) {\n\t\t\t\tif (index < 0 || index >= papers.length) return;\n\t\t\t\tconst paper = papers[index];\n\n\t\t\t\t// Build the HTML for the paper.\n\t\t\t\t// Adjust the properties as needed based on your paper struct.\n\t\t\t\tconst paperHTML = `\n\t\t\t\t\t<div class=\"flex flex-col gap-4\">\n\t\t\t\t\t\t<h2 class=\"text-xl font-bold\">${paper.Title}</h2>\n\t\t\t\t\t\t<div class=\"flex flex-wrap gap-2 text-subtext1 font-medium\">\n\t\t\t\t\t\t\t<p>Published:${new Date(paper.Published).toLocaleString()}</p> \n\t\t\t\t\t\t\t<span>|</span>\n\t\t\t\t\t\t\t<p>Updated: ${new Date(paper.Updated).toLocaleString()}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p>${paper.Summary || ''}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"flex flex-wrap gap-2\">\n\t\t\t\t\t\t\t<a href=\"${paper.Links[0].Href}\" target=\"_blank\" class=\"text-blue-500 hover:underline\">\n\t\t\t\t\t\t\t\tRead more\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t\tdocument.getElementById('paper-container').innerHTML = paperHTML;\n\t\t\t}\n\n\t\t\t// Initialize the paper container with the first paper\n\t\t\trenderPaper(currentIndex);\n\n\t\t\t// Add event listeners to the chevron buttons\n\t\t\tdocument.getElementById('prevBtn').addEventListener('click', () => {\n\t\t\t\tif (currentIndex > 0) {\n\t\t\t\t\tcurrentIndex--;\n\t\t\t\t\trenderPaper(currentIndex);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdocument.getElementById('nextBtn').addEventListener('click', () => {\n\t\t\t\tif (currentIndex < papers.length - 1) {\n\t\t\t\t\tcurrentIndex++;\n\t\t\t\t\trenderPaper(currentIndex);\n\t\t\t\t}\n\t\t\t});\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.Layout(data.BaseData).Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate

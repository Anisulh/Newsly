package pages

import (
	"Newsly/web/templates/layouts"
	"Newsly/web/templates/partials"
	"Newsly/internal/utils"
	"Newsly/web/templates/partials/icons"
)


templ paperBody(data []utils.ArxivEntry) {
	@templ.JSONScript("papers", data)
}


templ FeedPage(data utils.FeedData) {
	@layouts.Layout(data.BaseData) {
		<div class="min-h-screen my-10 flex flex-col gap-4 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="w-full flex flex-wrap gap-4 items-center bg-mantle rounded-xl p-4"> 
				@partials.Chip("Feed", "bg-rosewater")
				@partials.Chip("Trending", "bg-cp_red")
				@partials.Chip("Politics", "bg-cp_blue")
			</div>
			@templ.JSONScript("papers", data.Papers)
			<h1 class="font-bold text-2xl">Your Feed:</h1>
			// <div class="flex flex-col gap-4 mt-4">
			// 	@partials.paperCard(data.papers)
			// </div>
			<!-- Change layout to column on mobile and row on md+ -->
			<div class="flex-grow flex flex-col md:flex-row gap-4 mt-4">
				<button id="prevBtn" type="button" class="hidden md:flex hover:bg-mantle transition-colors px-2 py-1 rounded-lg my-auto">
					@icons.ChevronLeft()
				</button>
				<div class="bg-mantle rounded-xl px-4 md:px-16 py-12 flex-grow relative">
					// @partials.paper()
				<div id="paper-container" class="bg-mantle rounded-xl px-4 md:px-8 py-8 flex-grow relative">
				</div>
					<div class="bg-crust bg-opacity-70 h-fit flex flex-col gap-4 absolute right-0 bottom-0 md:top-0 items-center justify-center p-4 rounded-xl">
						<button class="flex flex-col justify-center items-center">
							@icons.Heart()
							<span>1.5k</span>
						</button>
						<button class="flex flex-col justify-center items-center">
							@icons.Comment()
							<span>1.5k</span>
						</button>
						<button class="flex flex-col justify-center items-center">
							@icons.Bookmark()
							<span>1.5k</span>
						</button>
					</div>
				</div>
				<button id="nextBtn" type="button" class="hidden md:flex hover:bg-mantle transition-colors px-2 py-1 rounded-lg my-auto">
					@icons.ChevronRight()
				</button>
			</div>
		</div>
		<script>
			// Convert the papers passed from the server to a JS variable.
			// (Assumes your templating engine provides a helper like @json to output valid JSON.)
			const papers =JSON.parse(document.getElementById('papers').textContent);
			console.log(papers[0])
			let currentIndex = 0;

			// Function to render an paper in the container
			function renderPaper(index) {
				if (index < 0 || index >= papers.length) return;
				const paper = papers[index];

				// Build the HTML for the paper.
				// Adjust the properties as needed based on your paper struct.
				const paperHTML = `
					<div class="flex flex-col gap-4">
						<h2 class="text-xl font-bold">${paper.Title}</h2>
						<div class="flex flex-wrap gap-2 text-subtext1 font-medium">
							<p>Published:${new Date(paper.Published).toLocaleString()}</p> 
							<span>|</span>
							<p>Updated: ${new Date(paper.Updated).toLocaleString()}</p>
						</div>
						<div>
							<p>${paper.Summary || ''}</p>
						</div>
						<div class="flex flex-wrap gap-2">
							<a href="${paper.Links[0].Href}" target="_blank" class="text-blue-500 hover:underline">
								Read more
							</a>
							</div>
					</div>
				`;
				document.getElementById('paper-container').innerHTML = paperHTML;
			}

			// Initialize the paper container with the first paper
			renderPaper(currentIndex);

			// Add event listeners to the chevron buttons
			document.getElementById('prevBtn').addEventListener('click', () => {
				if (currentIndex > 0) {
					currentIndex--;
					renderPaper(currentIndex);
				}
			});

			document.getElementById('nextBtn').addEventListener('click', () => {
				if (currentIndex < papers.length - 1) {
					currentIndex++;
					renderPaper(currentIndex);
				}
			});
		</script>
	}
}
